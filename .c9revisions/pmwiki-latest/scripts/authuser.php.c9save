{"ts":1371754071178,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php if (!defined('PmWiki')) exit();\n/*  Copyright 2005-2010 Patrick R. Michaud (pmichaud@pobox.com)\n    This file is part of PmWiki; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published\n    by the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.  See pmwiki.php for full details.\n\n    The APR compatible MD5 encryption algorithm in _crypt() below is \n    based on code Copyright 2005 by D. Faure and the File::Passwd\n    PEAR library module by Mike Wallner <mike@php.net>.\n\n    This script enables simple authentication based on username and \n    password combinations.  At present this script can authenticate\n    from passwords held in arrays or in .htpasswd-formatted files,\n    but eventually it will support authentication via sources such\n    as LDAP and Active Directory.\n\n    To configure a .htpasswd-formatted file for authentication, do\n        $AuthUser['htpasswd'] = '/path/to/.htpasswd';\n    prior to including this script.  \n\n    Individual username/password combinations can also be placed\n    directly in the $AuthUser array, such as:\n        $AuthUser['pmichaud'] = crypt('secret');\n\n    To authenticate against an LDAP server, put the url for\n    the server in $AuthUser['ldap'], as in:\n        $AuthUser['ldap'] = 'ldap://ldap.example.com/ou=People,o=example?uid';\n*/\n\n# let Site.AuthForm know that we're doing user-based authorization\n$EnableAuthUser = 1;\n\nif (@$_POST['authid']) \n  AuthUserId($pagename, stripmagic(@$_POST['authid']), \n             stripmagic(@$_POST['authpw']));\nelse SessionAuth($pagename);\n\nfunction AuthUserId($pagename, $id, $pw=NULL) {\n  global $AuthUser, $AuthUserPageFmt, $AuthUserFunctions, \n    $AuthId, $MessagesFmt, $AuthUserPat;\n\n  $auth = array();\n  foreach((array)$AuthUser as $k=>$v) $auth[$k] = (array)$v;\n  $authid = '';\n\n  # load information from SiteAdmin.AuthUser (or page in $AuthUserPageFmt)\n  SDV($AuthUserPageFmt, '$SiteAdminGroup.AuthUser');\n  SDVA($AuthUserFunctions, array(\n    'htpasswd' => 'AuthUserHtPasswd',\n    'ldap' => 'AuthUserLDAP',\n#    'mysql' => 'AuthUserMySQL',\n    $id => 'AuthUserConfig'));\n\n  SDV($AuthUserPat, \"/^\\\\s*([@\\\\w][^\\\\s:]*):(.*)/m\");\n  $pn = FmtPageName($AuthUserPageFmt, $pagename);\n  $apage = ReadPage($pn, READPAGE_CURRENT);\n  if ($apage && preg_match_all($AuthUserPat, \n                               $apage['text'], $matches, PREG_SET_ORDER)) {\n    foreach($matches as $m) {\n      if (!preg_match_all('/\\\\bldaps?:\\\\S+|[^\\\\s,]+/', $m[2], $v))\n        continue;\n      if ($m[1]{0} == '@') \n        foreach($v[0] as $g) $auth[$g][] = $m[1];\n      else $auth[$m[1]] = array_merge((array)@$auth[$m[1]], $v[0]);\n    }\n  }\n\n  if (func_num_args()==2) $authid = $id;\n  else\n    foreach($AuthUserFunctions as $k => $fn) \n      if (@$auth[$k] && $fn($pagename, $id, $pw, $auth[$k], $authlist)) \n        { $authid = $id; break; }\n\n  if (!$authid) { $GLOBALS['InvalidLogin'] = 1; return; }\n  if (!isset($AuthId)) $AuthId = $authid;\n  $authlist[\"id:$authid\"] = 1;\n  $authlist[\"id:-$authid\"] = -1;\n  foreach(preg_grep('/^@/', (array)@$auth[$authid]) as $g) \n    $authlist[$g] = 1;\n  foreach(preg_grep('/^@/', (array)@$auth['*']) as $g) \n    $authlist[$g] = 1;\n  foreach(preg_grep('/^@/', array_keys($auth)) as $g) # useless? PITS:01201\n    if (in_array($authid, $auth[$g])) $authlist[$g] = 1;\n  if ($auth['htgroup']) {\n    foreach(AuthUserHtGroup($pagename, $id, $pw, $auth['htgroup']) as $g)\n      $authlist[\"@$g\"] = 1;\n  }\n  foreach(preg_grep('/^@/', (array)@$auth[\"-$authid\"]) as $g) \n    unset($authlist[$g]);\n  SessionAuth($pagename, array('authid' => $authid, 'authlist' => $authlist));\n}\n\n\nfunction AuthUserConfig($pagename, $id, $pw, $pwlist) {\n  foreach ((array)$pwlist as $chal) \n    if (_crypt($pw, $chal) == $chal) return true;\n  return false;\n}\n\n\nfunction AuthUserHtPasswd($pagename, $id, $pw, $pwlist) {\n  foreach ((array)$pwlist as $f) {\n    $fp = fopen($f, \"r\"); if (!$fp) continue;\n    while ($x = fgets($fp, 1024)) {\n      $x = rtrim($x);\n      @list($i, $c, $r) = explode(':', $x, 3);\n      if ($i == $id && _crypt($pw, $c) == $c) { fclose($fp); return true; }\n    }\n    fclose($fp);\n  }\n  return false;\n}\n\n\nfunction AuthUserHtGroup($pagename, $id, $pw, $pwlist) {\n  $groups = array();\n  foreach ((array)$pwlist as $f) {\n    $fp = fopen($f, 'r'); if (!$fp) continue;\n    while ($x = fgets($fp, 4096)) {\n      if (preg_match('/^(\\\\w[^\\\\s:]+)\\\\s*:(.*)$/', trim($x), $match)) {\n        $glist = preg_split('/[\\\\s,]+/', $match[2], -1, PREG_SPLIT_NO_EMPTY);\n        if (in_array($id, $glist)) $groups[$match[1]] = 1;\n      }\n    }\n    fclose($fp);\n  }\n  return array_keys($groups);\n}\n  \n\nfunction AuthUserLDAP($pagename, $id, $pw, $pwlist) {\n  global $AuthLDAPBindDN, $AuthLDAPBindPassword;\n  if (!$pw) return false;\n  if (!function_exists('ldap_connect')) \n    Abort('authuser: LDAP authentication requires PHP ldap functions','ldapfn');\n  foreach ((array)$pwlist as $ldap) {\n    if (!preg_match('!(ldaps?://[^/]+)/(.*)$!', $ldap, $match))\n      continue;\n    ##  connect to the LDAP server\n    list($z, $url, $path) = $match;\n    $ds = ldap_connect($url);\n    ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);\n    ##  For Active Directory, don't specify a path and we simply\n    ##  attempt to bind with the username and password directly\n    if (!$path && @ldap_bind($ds, $id, $pw)) { ldap_close($ds); return true; }\n    ##  Otherwise, we use Apache-style urls for LDAP authentication\n    ##  Split the path into its search components\n    list($basedn, $attr, $sub, $filter) = explode('?', $path);\n    if (!$attr) $attr = 'uid';\n    if (!$sub) $sub = 'one';\n    if (!$filter) $filter = '(objectClass=*)';\n    $binddn = @$AuthLDAPBindDN;\n    $bindpw = @$AuthLDAPBindPassword;\n    if (ldap_bind($ds, $binddn, $bindpw)) {\n      ##  Search for the appropriate uid\n      $fn = ($sub == 'sub') ? 'ldap_search' : 'ldap_list';\n      $sr = $fn($ds, $basedn, \"(&$filter($attr=$id))\", array($attr));\n      $x = ldap_get_entries($ds, $sr);\n      ##  If we find a unique id, bind to it for success\n      if ($x['count'] == 1) {\n        $dn = $x[0]['dn'];\n        if (@ldap_bind($ds, $dn, $pw)) { ldap_close($ds); return true; }\n      }\n    }\n    ldap_close($ds);\n  }\n  return false;\n}\n\n\n#  The _crypt function provides support for SHA1 encrypted passwords \n#  (keyed by '{SHA}') and Apache MD5 encrypted passwords (keyed by \n#  '$apr1$'); otherwise it just calls PHP's crypt() for the rest.\n#  The APR MD5 encryption code was contributed by D. Faure.\n\nfunction _crypt($plain, $salt=null) {\n  if (strncmp($salt, '{SHA}', 5) == 0) \n    return '{SHA}'.base64_encode(pack('H*', sha1($plain)));\n  if (strncmp($salt, '$apr1$', 6) == 0) {\n    preg_match('/^\\\\$apr1\\\\$([^$]+)/', $salt, $match);\n    $salt = $match[1];\n    $length = strlen($plain);\n    $context = $plain . '$apr1$' . $salt;\n    $binary = pack('H32', md5($plain . $salt . $plain));\n    for($i = $length; $i > 0; $i -= 16) \n      $context .= substr($binary, 0, min(16, $i));\n    for($i = $length; $i > 0; $i >>= 1)\n      $context .= ($i & 1) ? chr(0) : $plain{0};\n    $binary = pack('H32', md5($context));\n    for($i = 0; $i < 1000; $i++) {\n      $new = ($i & 1) ? $plain : $binary;\n      if ($i % 3) $new .= $salt;\n      if ($i % 7) $new .= $plain;\n      $new .= ($i & 1) ? $binary : $plain;\n      $binary = pack('H32', md5($new));\n    }\n    $q = '';\n    for ($i = 0; $i < 5; $i++) {\n      $k = $i + 6;\n      $j = $i + 12;\n      if ($j == 16) $j = 5;\n      $q = $binary{$i}.$binary{$k}.$binary{$j} . $q;\n    }\n    $q = chr(0).chr(0).$binary{11} . $q;\n    $q = strtr(strrev(substr(base64_encode($q), 2)),\n           'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n           './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n    return \"\\$apr1\\$$salt\\$$q\";\n  }\n  if (md5($plain) == $salt) return $salt;\n  return crypt($plain, $salt);\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7930}]],"length":7930}
